#summary One-sentence summary of this page.

= XÂY DỰNG BOOTLOADER ĐƠN GIẢN =

 Sử dụng [https://code.google.com/p/armtutorial/wiki/03_BARE_METAL_PROJECT STM32_BARE_METAL_PROJECT] thay đổi một chút ít ta có thể tạo ra được một chương trình bootloader đơn giản.

  Trên bộ nhớ FLASH của STM32, bootloader được thiết kế với phần code không vượt quá 64K bắt đầu ở vi trí 0x08000000. Kế đến là chương trình ứng dụng, ta định nghĩa các tham số như sau:

 {{{
    #define FLASH_BASE           0x08000000                         /* Vùng cho bootloader */ 
    #define BOOTLOADER_MAX_SIZE  0x00010000                         /* 64K                 */
    #define IMAGE_ADDR           (FLASH_BASE + BOOTLOADER_MAX_SIZE) /* Vùng ứng dụng       */              
 }}}

= CHƯƠNG TRÌNH BOOTLOADER =

 == 1> gcc_arm.ld : ==

{{{

   PROVIDE(__image_addr = 0x08010000);

   MEMORY
   {
     FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 64K
     RAM (rwx)  : ORIGIN = 0x20000000, LENGTH = 16K
   }

   ENTRY(Reset_Handler)

   SECTIONS
   {
      .text :
      {
	KEEP(*(.isr_vector))
        *(.text*)

	KEEP(*(.init))
	KEEP(*(.fini))
        ...  
   }
}}} 
 
  Linker script của bootloader tương tự với [https://code.google.com/p/armtutorial/wiki/03_BARE_METAL_PROJECT STM32_BARE_METAL_PROJECT], ở phần khai báo memory, nên giới hạn tham số LENGTH của FLASH để ta có thể kiểm soát được trường hợp code size của bootloader bị tràng và overlapse với vùng ứng dụng. 

{{{
   PROVIDE(__image_addr = 0x08010000);
}}}

 Tạo một symbol có tên là {{{__image_addr}}} đánh dấu vị trí 0x08010000 cho vùng ứng dụng. Việc tạo symbol này tạo nên tính tiện dụng, các source trong chương trình bootloader có thể tham chiếu đến symbol này mà ko cần phải khai báo ở các header file hoặc {{{#define}}}...

 == 2> startup_stm32f4xx.S ==
 
  Hoàn toàn tương tự với [https://code.google.com/p/armtutorial/wiki/03_BARE_METAL_PROJECT STM32_BARE_METAL_PROJECT]

 == 3> system_stm32f4xx.c == 
  
  Lowlevel init, sau khi khởi động CPU clock, ngoại vi... Ta cần map interrupt vector table đến vị trí đầu của chương trình ứng dụng:

  {{{
     /* Do remap interrupt vector */
     extern long __image_addr;
     SCB->VTOR = __image_addr;  
  }}}
 